import {config} from "dotenv";
import {Container} from "inversify";
import {TYPES} from "./types";
import {App} from "./app";
import 'reflect-metadata';
import {IMainPageController} from "./handlebars-controllers/main-page/main.page.controller.interface";
import {MainPageController} from "./handlebars-controllers/main-page/main.page.controller";
import {IProductPageController} from "./handlebars-controllers/product-page/product.page.controller.interface";
import {ProductPageController} from "./handlebars-controllers/product-page/product.page.controller";
import {ReviewController} from "./items/reviews/review.controller";
import {IReviewController} from "./items/reviews/review.controller.interface";
import {ISearchPageController} from "./handlebars-controllers/search-product/search.page.controller.interface";
import {SearchPageController} from "./handlebars-controllers/search-product/search.page.controller";
import {IRegisterPageController} from "./handlebars-controllers/register-page/register.page.controller.interface";
import {RegisterPageController} from "./handlebars-controllers/register-page/register.page.controller";
import {ILoginPageController} from "./handlebars-controllers/login-page/login.page.controller.interface";
import {LoginPageController} from "./handlebars-controllers/login-page/login.page.controller";
import {MongooseService} from "./database/mongoose.service";
import {IMongooseService} from "./database/mongoose.service.interface";
import {IUsersService} from "./users/users.service.interface";
import {UsersService} from "./users/users.service";
import {IUsersRepository} from "./users/users.repository.interface";
import {UsersRepository} from "./users/users.repository";
import {IUserPageController} from "./handlebars-controllers/user-page/user.page.controller.interface";
import {UserPageController} from "./handlebars-controllers/user-page/user.page.controller";
import {IUserPageOrdersController} from "./handlebars-controllers/user-page-orders/user.page.orders.controller.interface";
import {UserPageOrdersController} from "./handlebars-controllers/user-page-orders/user.page.orders.controller";
import {IUserPageSavedController} from "./handlebars-controllers/user-page-saved/user.page.saved.controller.interface";
import {UserPageSavedController} from "./handlebars-controllers/user-page-saved/user.page.saved.controller";
import {IOrderPageController} from "./handlebars-controllers/order-page/order.page.controller.interface";
import {OrderPageController} from "./handlebars-controllers/order-page/order.page.controller";
import {IItemsService} from "./items/items.service.interface";
import {ItemsService} from "./items/items.service";
import {IItemsRepository} from "./items/items.repository.interface";
import {ItemsRepository} from "./items/items.repository";
import {IItemController} from "./items/item.controller.interface";
import {ItemController} from "./items/item.controller";
import {IReviewService} from "./items/reviews/review.service.interface";
import {ReviewService} from "./items/reviews/review.service";
import {IOrderPageService} from "./handlebars-controllers/order-page/order.page.service.interface";
import {OrderPageService} from "./handlebars-controllers/order-page/order.page.service";
import {CheckAuthMiddleware} from "./common/check.auth.middleware";
import {IUserPageSavedService} from "./handlebars-controllers/user-page-saved/user.page.saved.service.interface";
import {UserPageSavedService} from "./handlebars-controllers/user-page-saved/user.page.saved.service";
import {IOrderRepository} from "./orders/order.repository.interface";
import {OrderRepository} from "./orders/order.repository";
import {IOrderService} from "./orders/order.service.interface";
import {OrderService} from "./orders/order.service";

config();
const myContainer = new Container();
myContainer.bind<IMainPageController>(TYPES.IMainPageController).to(MainPageController).inSingletonScope();
myContainer.bind<IProductPageController>(TYPES.IProductPageController).to(ProductPageController).inSingletonScope();
myContainer.bind<IReviewController>(TYPES.IReviewController).to(ReviewController).inSingletonScope();
myContainer.bind<ISearchPageController>(TYPES.ISearchPageController).to(SearchPageController).inSingletonScope();
myContainer.bind<IRegisterPageController>(TYPES.IRegisterPageController).to(RegisterPageController).inSingletonScope();
myContainer.bind<ILoginPageController>(TYPES.ILoginPageController).to(LoginPageController).inSingletonScope();
myContainer.bind<IMongooseService>(TYPES.IMongooseService).to(MongooseService).inSingletonScope();
myContainer.bind<IUsersService>(TYPES.IUsersService).to(UsersService).inSingletonScope();
myContainer.bind<IUsersRepository>(TYPES.IUsersRepository).to(UsersRepository).inSingletonScope();
myContainer.bind<IUserPageController>(TYPES.IUserPageController).to(UserPageController).inSingletonScope();
myContainer.bind<IUserPageOrdersController>(TYPES.IUserPageOrdersController).to(UserPageOrdersController).inSingletonScope();
myContainer.bind<IUserPageSavedController>(TYPES.IUserPageSavedController).to(UserPageSavedController).inSingletonScope();
myContainer.bind<IOrderPageController>(TYPES.IOrderPageController).to(OrderPageController).inSingletonScope();
myContainer.bind<IItemsService>(TYPES.IItemsService).to(ItemsService).inSingletonScope();
myContainer.bind<IItemsRepository>(TYPES.IItemsRepository).to(ItemsRepository).inSingletonScope();
myContainer.bind<IItemController>(TYPES.IItemController).to(ItemController).inSingletonScope();
myContainer.bind<IReviewService>(TYPES.IReviewService).to(ReviewService).inSingletonScope();
myContainer.bind<IOrderPageService>(TYPES.IOrderPageService).to(OrderPageService).inSingletonScope();
myContainer.bind<CheckAuthMiddleware>(TYPES.CheckAuthMiddleware).to(CheckAuthMiddleware).inSingletonScope();
myContainer.bind<IUserPageSavedService>(TYPES.IUserPageSavedService).to(UserPageSavedService).inSingletonScope();
myContainer.bind<IOrderRepository>(TYPES.IOrderRepository).to(OrderRepository).inSingletonScope();
myContainer.bind<IOrderService>(TYPES.IOrderService).to(OrderService).inSingletonScope();
myContainer.bind<App>(TYPES.App).to(App).inSingletonScope();

const app = myContainer.get<App>(TYPES.App);
app.init();

